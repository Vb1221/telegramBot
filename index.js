const adminId = '713306025';  

require('dotenv').config();

const url = process.env.MONGODB_URL;
const token = process.env.TELEGRAM_TOKEN;
const instagramUrl = process.env.INSTAGRAM_URL;


const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');

const bot = new TelegramBot(token, { polling: true });

mongoose.connect(url, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Error connecting to MongoDB:', error);
  });

const User = mongoose.model('User', {
  userId: Number,
  username: String,
  firstName: String,
  lastName: String,
  token: {
    type: Number,
    default: 0
  }
});

const options = {
  reply_markup: {
    keyboard: [
      ['üíú–æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ—à–∫—É'],
      ['ü§ç–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ñ—ñ—à–∫–∏'],
      ['ü§ë –±–∞–ª–∞–Ω—Å —Ñ—ñ—à–æ–∫'],
      ['üìåinstagram']
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
function sendMessageToUser(chatId, message) {
  bot.sendMessage(chatId, message);
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
function handleStartCommand(msg) {
  const chatId = msg.chat.id;
  try {
    const existingUser = User.findOne({ userId: chatId });
    if (existingUser) {
      bot.sendMessage(chatId, '–©–æ –≤–º—ñ—î —Ü–µ–π –±–æ—Ç?\n  \n üíú–ó–±–∏—Ä–∞–π —Ñ—ñ—à–∫–∏\n \nü§ç –û–±–º—ñ–Ω—é–π —Ñ—ñ—à–∫–∏ –Ω–∞ —Å–≤–æ—ó —É–ª—é–±–ª–µ–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏\n \n‚ú®–û—Ç—Ä–∏–º—É–π –Ω–æ–≤–∏–Ω–∏ –ø–µ—Ä—à–∏–º–∏', options);
    } else {
      const { username, first_name, last_name } = msg.from;
      const user = new User({
        userId: chatId,
        username,
        firstName: first_name,
        lastName: last_name,
        token
      });
      user.save();
      // bot.sendMessage(chatId, '–í–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ!');
      bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', options);
    }
  } catch (error) {
    console.error('Error registering user:', error);
    bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª—É
function confirmUserToken(userId) {
  User.findOne({ userId })
    .then((user) => {
      if (user) {
        const userName = user.firstName
        bot.sendMessage(adminId, `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userName} –∑–∞–ø–∏—Ç—É—î –ø—Ä–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ—à–∫–∏. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ñ—ñ—à–∫–∏?`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–¢–∞–∫', callback_data: `confirmToken:${userId}` }],
              [{ text: '–ù—ñ', callback_data: `rejectToken:${userId}` }]
            ]
          }
        });
      } else {
        bot.sendMessage(adminId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      }
    })
    .catch((error) => {
      console.error('Error finding user:', error);
      bot.sendMessage(adminId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
function confirmToken(chatId, userId) {
  User.findOneAndUpdate({ userId }, { $inc: { token: 1 } }, { new: true })
    .then((user) => {
      if (user) {
        const token = user.token;
        bot.sendMessage(userId, `–ö–ª–∞—Ü- –∫–ª–∞—Ü ‚ú®‚ú®\n \n–í–∞–º –¥–æ–¥–∞–ª–∏ 1 —Ñ—ñ—à–∫—É üíú\n \n–ß—É–¥–æ–≤–∏—Ö –±—Ä—ñ–≤ —Ç–∞ –≥–∞—Ä–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é ‚ò∫Ô∏è`);
      } else {
        bot.sendMessage(userId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      }
    })
    .catch((error) => {
      console.error('Error updating token:', error);
      bot.sendMessage(userId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ—à–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
    });
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª"
function handleGetTokenCommand(msg) {
  
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–ó–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ üòá‚ú®\n \n P.S. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∏—Ç–∏ –ª–∏—à–µ –∫–æ–ª–∏ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–æ—Ä—É—á –∑ –º–∞–π—Å—Ç—Ä–æ–º ‚ò∫Ô∏è')
  confirmUserToken(chatId);
}

// –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª—É
function handleCallbackQuery(callbackQuery) {
  const query = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;

  if (query === 'back') {
    sendMessageToUser(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', options);
  } else if (query.startsWith('confirmToken')) {
    const [, userId] = query.split(':');
    confirmToken(chatId, userId);
  } else if (query.startsWith('rejectToken')) {
    bot.sendMessage(adminId, '–ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ—à–æ–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
  } else if (query.startsWith('exchange')) {
    const [, tokens, discount] = query.split(':');
    confirmToken(chatId, tokens);
  }
}

bot.onText(/\/start/, handleStartCommand);

bot.onText(/^(üíú–æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ—à–∫—É)$/, handleGetTokenCommand);

bot.on('callback_query', handleCallbackQuery);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function checkUserTokens(msg) {
  const chatId = msg.chat.id;

  try {
    const user = await User.findOne({ userId: chatId });
    if (user) {
      const tokens = user.token;
      sendMessageToUser(chatId, `–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å —Ñ—ñ—à–æ–∫ :${tokens}üíú\n \n–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ ‚ú®`);
    } else {
      sendMessageToUser(chatId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
  } catch (error) {
    console.error('Error finding user:', error);
    sendMessageToUser(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ—à–æ–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∏"
bot.onText(/^(ü§ë –±–∞–ª–∞–Ω—Å —Ñ—ñ—à–æ–∫)$/, checkUserTokens);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –ø—Ä–∏ –æ–±–º—ñ–Ω—ñ
async function deductTokens(userId, tokens) {
  try {
    const updatedUser = await User.findOneAndUpdate({ userId: userId }, { $inc: { token: -tokens } }, { new: true });
    if (updatedUser) {
      const updatedTokens = updatedUser.token;
      sendMessageToUser(userId, `–í–∏ –æ–±–º—ñ–Ω—è–ª–∏ ${tokens} —Ñ—ñ—à–∫–∏ –Ω–∞ –∑–Ω–∏–∂–∫—É –≤ ${tokens * 20} –≥—Ä–Ω. –í–∞—à –∑–∞–ª–∏—à–æ–∫ —Ñ—ñ—à–æ–∫: ${updatedTokens}`);
    } else {
      sendMessageToUser(userId, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    }
  } catch (error) {
    console.error('Error deducting tokens:', error);
    sendMessageToUser(userId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–Ω—ñ —Ñ—ñ—à–æ–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ –æ–±–º—ñ–Ω –±–∞–ª—ñ–≤
function confirmTokenExchange(userId, tokens, discount) {
  User.findOne({ userId })
    .then((user) => {
      if (user) {
        const userName = user.firstName;
        bot.sendMessage(adminId, `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userName} –±–∞–∂–∞—î –æ–±–º—ñ–Ω—è—Ç–∏ ${tokens} —Ñ—ñ—à–æ–∫ –Ω–∞ –∑–Ω–∏–∂–∫—É –≤ ${discount} –≥—Ä–Ω. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–±–º—ñ–Ω?`, {
          reply_markup: {
            inline_keyboard: [
        [{ text: '–¢–∞–∫', callback_data: `confirmExchange:${userId}:${tokens}:${discount}` }],
        [{ text: '–ù—ñ', callback_data: `rejectExchange:${userId}` }]
      ]
    }
  });
}
})
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω –±–∞–ª—ñ–≤
function handleExchangeTokensCallback(query) {
  const data = query.data;
  const chatId = query.message.chat.id;

  if (data === 'back') {
    sendMessageToUser(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', options);
  } else if (data.startsWith('exchange')) {
    const [, tokens, discount] = data.split(':');
    confirmTokenExchange(chatId, tokens, discount);
  } else if (data.startsWith('confirmExchange')) {
    const [, userId, tokens, discount] = data.split(':');
    deductTokens(userId, tokens);
  } else if (data.startsWith('rejectExchange')) {
    sendMessageToUser(chatId, '–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω —Ñ—ñ—à–æ–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ "–ú—ñ–Ω—è—Ç–∏ –ë–∞–ª–∏"
function handleExchangeTokens(msg) {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –æ–±–º—ñ–Ω—É —Ñ—ñ—à–æ–∫:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '1 —Ñ—ñ—à–∫–∞ - 20 –≥—Ä–Ω', callback_data: 'exchange:1:20' }],
        [{ text: '3 —Ñ—ñ—à–∫–∏ - 60 –≥—Ä–Ω', callback_data: 'exchange:3:60' }],
        [{ text: '5 —Ñ—ñ—à–æ–∫ - 100 –≥—Ä–Ω', callback_data: 'exchange:5:100' }],
        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
      ]
    }
  });
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "–ú—ñ–Ω—è—Ç–∏ –ë–∞–ª–∏"
bot.onText(/^(ü§ç–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ñ—ñ—à–∫–∏)$/, handleExchangeTokens);

bot.on('callback_query', handleExchangeTokensCallback);


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ "–Ü–Ω—Å—Ç–∞–≥—Ä–∞–º"
function handleInstagramCommand(msg) {
  const chatId = msg.chat.id;
  sendMessageToUser(chatId, instagramUrl);
}

// –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "–Ü–Ω—Å—Ç–∞–≥—Ä–∞–º"
bot.onText(/^(üìåinstagram)$/, handleInstagramCommand);